import { z } from 'zod';

// Backend-compliant enums (matching the exact values expected by the API)
export const ApiTelcos = {
  MTN: 'mtn',
  AIRTEL: 'airtel', 
  TELECEL: 'telecel',
  ORANGE: 'orange'
} as const;

export const ApiFrequency = {
  DAILY: 'daily',
  WEEKLY: 'weekly', 
  MONTHLY: 'monthly'
} as const;

export const ApiSurcharge = {
  CUSTOMER: 'customer',
  MERCHANT: 'merchant',
  BOTH: 'customer_and_merchant',
  PARENT: 'parent'
} as const;

export const ApiSettlementAcctType = {
  PARENT: 'parent-bank',
  SUB_MERCHANT: 'sub-merchant-bank'
} as const;

export const ApiBankAccountType = {
  CALL_ACCOUNT: 'call_account',
  CURRENT_ACCOUNT: 'current_account', 
  SAVINGS: 'savings',
  CREDIT: 'credit',
  MB_WALLET: 'mb_wallet_account',
  PLS: 'pls_account',
  TDR: 'tdr_account'
} as const;

export const ApiSettlementType = {
  BP_WALLET: 'wallet',
  BANK_ACCT: 'bank',
  MOMO_WALLET: 'momo'
} as const;

export const ApiMerchantType = {
  PARENT: 'parent',
  SUB_MERCHANT: 'sub-merchant'
} as const;

// Custom validator for surcharge sum
const surchargeSumValidator = (data: { surchargeOnMerchant: number; surchargeOnCustomer: number }) => {
  return data.surchargeOnMerchant + data.surchargeOnCustomer <= 1.5;
};

// API-compliant validation schemas

// OVA Details Schema
export const apiOvaDetailSchema = z.object({
  telco: z.enum([ApiTelcos.MTN, ApiTelcos.AIRTEL, ApiTelcos.TELECEL, ApiTelcos.ORANGE]),
  ovaUuid: z.string().min(1, 'OVA UUID is required').regex(
    /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i,
    'OVA UUID must be in valid format'
  )
});

// Merchant Details Schema (matches MerchantDto)
export const apiMerchantDetailsSchema = z.object({
  merchantName: z.string().min(2, 'Merchant name must be at least 2 characters'),
  merchantNameSlug: z.string().optional(), // Auto-generated
  canProcessCardTransactions: z.boolean().default(true),
  canProcessMomoTransactions: z.boolean().default(true), 
  isBpMerchant: z.boolean().default(false),
  notificationEmail: z.string().email('Please enter a valid email address'),
  country: z.enum(['GHANA']),
  address: z.string().min(1, 'Address is required'),
  orgType: z.number().min(1, 'Organization type is required'),
  merchantCategory: z.number().min(1, 'Merchant category is required'),
  merchantCode: z.string().min(1, 'Merchant code is required'),
  terminal: z.string().uuid('Terminal must be a valid UUID'),
  createdBy: z.any().optional(), // Set by backend
  merchantKey: z.string().optional(), // Generated by backend
  merchantToken: z.string().optional() // Generated by backend
});

// Settlement Details Schema (matches CreateSettlementDto)
export const apiSettlementDetailsSchema = z.object({
  frequency: z.enum([ApiFrequency.DAILY, ApiFrequency.WEEKLY, ApiFrequency.MONTHLY]),
  surchargeOn: z.enum([ApiSurcharge.CUSTOMER, ApiSurcharge.MERCHANT, ApiSurcharge.BOTH, ApiSurcharge.PARENT]),
  surchargeCap: z.number().min(1).max(100).optional(),
  surchargeOnMerchant: z.number().min(0).max(1.5, 'Merchant surcharge cannot exceed 1.5%'),
  surchargeOnCustomer: z.number().min(0).max(1.5, 'Customer surcharge cannot exceed 1.5%'),
  surchargeSum: z.boolean().default(true), // Always true for validation
  parentBank: z.string().uuid('Partner bank must be a valid UUID'),
  settlementAcct: z.enum([ApiSettlementAcctType.PARENT, ApiSettlementAcctType.SUB_MERCHANT]),
  settlementType: z.enum([ApiSettlementType.BP_WALLET, ApiSettlementType.BANK_ACCT, ApiSettlementType.MOMO_WALLET]).optional(),
  vatApplicable: z.boolean().default(false),
  vatPercentage: z.string().default('0'),
  taxNumber: z.string().min(11, 'TIN must be at least 11 characters').max(15, 'TIN cannot exceed 15 characters')
}).refine(surchargeSumValidator, {
  message: 'The sum of merchant and customer surcharge should not exceed 1.5%',
  path: ['surchargeSum']
});

// User Details Schema (matches CreateUserDto + AuthRegisterLoginDto)
export const apiUserDetailsSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
  firstName: z.string().min(1, 'First name is required'),
  lastName: z.string().min(1, 'Last name is required'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  phoneNumber: z.string().min(10, 'Phone number must be at least 10 digits').max(15, 'Phone number cannot exceed 15 digits'),
  role: z.string().optional(), // Set by backend
  profileImage: z.string().optional(),
  hash: z.string().optional() // Generated by backend
});

// Bank Details Schema (matches CreateMerchantBankDetailsDto)
export const apiBankDetailsSchema = z.object({
  bankId: z.string().uuid('Bank must be a valid UUID'),
  branch: z.string().uuid('Branch must be a valid UUID'),
  accountName: z.string().min(1, 'Account name is required'),
  accountNumber: z.string().min(1, 'Account number is required'),
  accountType: z.enum([
    ApiBankAccountType.CALL_ACCOUNT,
    ApiBankAccountType.CURRENT_ACCOUNT,
    ApiBankAccountType.SAVINGS,
    ApiBankAccountType.CREDIT,
    ApiBankAccountType.MB_WALLET,
    ApiBankAccountType.PLS,
    ApiBankAccountType.TDR
  ])
});

// Momo Details Schema (matches CreateMerchantMomoDetailsDto) - Optional
export const apiMomoDetailsSchema = z.object({
  telco: z.enum([ApiTelcos.MTN, ApiTelcos.AIRTEL, ApiTelcos.TELECEL, ApiTelcos.ORANGE]),
  accountNumber: z.string().min(1, 'Account number is required')
}).optional();

// Complete Create Merchant Schema (matches CreateMerchantDto)
export const apiCreateMerchantSchema = z.object({
  merchantType: z.enum([ApiMerchantType.PARENT, ApiMerchantType.SUB_MERCHANT]).optional(),
  parent: z.string().uuid().optional(),
  merchantDetails: apiMerchantDetailsSchema,
  settlementDetails: apiSettlementDetailsSchema,
  userDetails: apiUserDetailsSchema,
  bankDetails: apiBankDetailsSchema,
  momoDetails: apiMomoDetailsSchema,
  ovaDetails: z.array(apiOvaDetailSchema).min(0, 'OVAs are optional for now')
});

// Type exports
export type ApiOvaDetail = z.infer<typeof apiOvaDetailSchema>;
export type ApiMerchantDetails = z.infer<typeof apiMerchantDetailsSchema>;
export type ApiSettlementDetails = z.infer<typeof apiSettlementDetailsSchema>;
export type ApiUserDetails = z.infer<typeof apiUserDetailsSchema>;
export type ApiBankDetails = z.infer<typeof apiBankDetailsSchema>;
export type ApiMomoDetails = z.infer<typeof apiMomoDetailsSchema>;
export type ApiCreateMerchant = z.infer<typeof apiCreateMerchantSchema>;

// Helper function to convert frontend form data to API format
export function mapFrontendToApiFormat(frontendData: any): ApiCreateMerchant {
  // Helper to generate slug from merchant name
  const generateSlug = (name: string): string => {
    return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
  };

  // Map frontend enum values to API enum values
  const mapFrequency = (freq: string): string => {
    const mapping: Record<string, string> = {
      'DAILY': ApiFrequency.DAILY,
      'WEEKLY': ApiFrequency.WEEKLY,
      'MONTHLY': ApiFrequency.MONTHLY
    };
    return mapping[freq] || freq.toLowerCase();
  };

  const mapSurcharge = (surcharge: string): string => {
    const mapping: Record<string, string> = {
      'Customer': ApiSurcharge.CUSTOMER,
      'Merchant': ApiSurcharge.MERCHANT,
      'BOTH': ApiSurcharge.BOTH
    };
    return mapping[surcharge] || surcharge;
  };

  const mapSettlementAccount = (account: string): string => {
    const mapping: Record<string, string> = {
      'PARENT_BANK': ApiSettlementAcctType.PARENT,
      'MERCHANT_BANK': ApiSettlementAcctType.SUB_MERCHANT
    };
    return mapping[account] || account;
  };

  const mapAccountType = (type: string): string => {
    const mapping: Record<string, string> = {
      'CURRENT_ACCOUNT': ApiBankAccountType.CURRENT_ACCOUNT,
      'SAVINGS': ApiBankAccountType.SAVINGS,
      'CALL_ACCOUNT': ApiBankAccountType.CALL_ACCOUNT
    };
    return mapping[type] || type;
  };

  return {
    merchantDetails: {
      merchantName: frontendData.merchantName,
      merchantNameSlug: generateSlug(frontendData.merchantName),
      canProcessCardTransactions: true,
      canProcessMomoTransactions: true,
      isBpMerchant: false,
      notificationEmail: frontendData.notificationEmail,
      country: frontendData.country,
      address: frontendData.merchantAddress,
      orgType: frontendData.orgType,
      merchantCategory: frontendData.merchantCategory,
      merchantCode: frontendData.merchantCode,
      terminal: frontendData.terminal,
      createdBy: undefined,
      merchantKey: '',
      merchantToken: ''
    },
    settlementDetails: {
      frequency: mapFrequency(frontendData.settlementFrequency),
      surchargeOn: mapSurcharge(frontendData.surcharge),
      surchargeCap: frontendData.surchargeCap,
      surchargeOnMerchant: frontendData.merchantPercentageSurcharge,
      surchargeOnCustomer: frontendData.customerPercentageSurcharge,
      surchargeSum: (frontendData.merchantPercentageSurcharge + frontendData.customerPercentageSurcharge) <= 1.5,
      parentBank: frontendData.partnerBank,
      settlementAcct: mapSettlementAccount(frontendData.settlementAccount),
      settlementType: ApiSettlementType.BANK_ACCT,
      vatApplicable: false,
      vatPercentage: '0',
      taxNumber: frontendData.tinNumber
    },
    userDetails: {
      email: frontendData.email,
      firstName: frontendData.firstName,
      lastName: frontendData.lastName,
      password: frontendData.password || 'TempPassword123!',
      phoneNumber: frontendData.phoneNumber,
      role: undefined,
      profileImage: undefined,
      hash: undefined
    },
    bankDetails: {
      bankId: frontendData.merchantBank,
      branch: frontendData.branch,
      accountName: frontendData.accountName,
      accountNumber: frontendData.accountNumber,
      accountType: mapAccountType(frontendData.accountType)
    },
    momoDetails: undefined,
    ovaDetails: (() => {
      const ovas = [];
      
      // Only add OVAs if they exist in the database (not our mock UUIDs)
      // For now, skip all OVAs since the database doesn't have any OVA records
      // This prevents foreign key constraint violations
      
      // Skip MTN OVA - would add if real OVAs existed in DB
      // Skip Airtel OVA - would add if real OVAs existed in DB  
      // Skip Telecel OVA - would add if real OVAs existed in DB
      
      console.log('Skipping OVAs - no OVA records exist in database yet');
      
      return ovas;
    })()
  };
}